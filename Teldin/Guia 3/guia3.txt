Aluno: Lucas Santiago de Oliveira
Matricula: 650888


1.)

a)
	C1,6 (1001(2)) = 110110(2)

b)
	C1,8 (1101(2)) = 11110010(2)

c)
	C2,6 (101111(2)) = 010001(2)

d)
	C2,7 (10011(2)) = 1101101(2)

e)
	C2,8 (11011(2)) = 11100101(2)

		Código em Verilog para resolver as 5 letras


module Questao1;

reg[5:0] a = 'b1001;
reg[7:0] b = 'b1101;
reg[5:0] c = 'b101111;
reg[6:0] d = 'b10011;
reg[7:0] e = 'b11011;

reg[5:0] c2 = 0;
reg[6:0] d2 = 0; 
reg[7:0] e2 = 0;

initial
begin : main

	$display("Bits normais letra A = %b, complemento de 1 da letra A = %b", a, ~a);
	$display("Bits normais letra B = %b, complemento de 1 da letra B = %b", b, ~b);
	c2 = ~c + 1;
	$display("Bits normais letra C = %b, complemento de 1 da letra C = %b", c, c2);
	d2 = ~d + 1;
	$display("Bits normais letra D = %b, complemento de 1 da letra D = %b", d, d2);
	e2 = ~e + 1;
	$display("Bits normais letra E = %b, complemento de 1 da letra E = %b", e, e2);

end
endmodule



2)

a)
	C1,6 (321(4)) = 000110(2)

b)
	C1,8 (5B(16)) = 10100100(2)

c)
	C2,6 (23(4)) = 110101(2)

d)
	C2,7 (175(8)) = 0000011(2)

e)
	C2,8 (B2(16)) = 01001110(2)



		Versão em Verilog

module Questao2;

reg[2:0][2:0] a; //Valor na base 4
reg[5:0] a2 = 0; //Valor na base 2

reg[7:0] b = 'h5B;

reg[2:0][2:0] c; //Valor na base 4
reg[5:0] c2 = 0; //Valor na base 2
reg[5:0] c3 = 0; //Valor invertido na base 2

reg[6:0] d = 'o175;
reg[6:0] d2 = 0;

reg[7:0] e = 'hB2;
reg[7:0] e2 = 0;

initial
begin : main

	a[0] = 3;
	a[1] = 2;
	a[2] = 1;

	a2[1:0] = a[2];
	a2[3:2] = a[1];
	a2[5:4] = a[0];

	c[1] = 2;
	c[0] = 3;

	c2[1:0] = c[0];
       	c2[3:2] = c[1];

	c3 = ~c2+1;

	d2 = ~d+1;

	e2 = ~e+1;

	$display("O complemento do numero %b é %b.", a2, ~a2);
	$display("O complemento do numero %b é %b.", b, ~b);
	$display("O complemento do numero %b é %b.", c2, c3);
	$display("O complemento do numero %b é %b.", d, d2);
	$display("O complemento do numero %b é %b.", e, e2);

end
endmodule



3)

a)
	1101(2) = 3(10)

b)
	110011(2) = 13(10)

c)
	111101(2) = 11(2)

d)
	10111101(2) = 43(16)


		Versão em Verilog


module Questao3;

reg signed [3:0] a = 4'b1101;  //Numero na base 2
reg signed [3:0] a2;  //Numero invertido

reg signed [5:0] b = 6'b110011; //Numero na base 2
reg signed [5:0] b2; //Numero invertido

reg signed [5:0] c = 6'b111101; //Numero na base 2
reg signed [5:0] c2; //Numero invertido

reg signed [6:0] d = 7'b1011111; //Numero na base 2
reg signed [6:0] d2; //Numero invertido

reg signed [7:0] e = 8'b10111101; //Numero na base 2
reg signed [7:0] e2; //Numero invertido


initial
begin : main
	
	a2 = ~(a-1);
	$display("Valor a: %d", a2);

	b2 = ~(b-1);
	$display("Valor b: %d", b2);

	c2 = ~(c-1);
	$display("Valor c: %b", c2);

	d2 = ~(d-1);
	$display("Valor d: %b", d2);

	e2 = ~(e-1);
	$display("Valor e: %h", e2);	
	

end
endmodule


4)

a)
	10111(2) - 1101(2) = 11010(2)

b)
	101,0111(2) - 10,01(2) = 011,0011

c)
	231(4) - 113(4) = 112(4)

d)
	321(8) - 123(8) = 376(8)

e)
	7E6(16) - A1B(16) = 5CB(16)

		Versão em Verilog



module Questao4;

reg signed[4:0] a = 'b10111; //Valor na base 2
reg signed[3:0] a2 = 'b1101; //Valor na base 2 para ser subtraido
reg signed[4:0] respA; //Resposta da A

reg signed[2:0] b = 'b101; //Parte inteira da letra b
reg signed[3:0] bFracionado = 'b0111; //Parte fracionada para b
reg signed[2:0] b2 = 'b010; //Parte inteira do segundo operando de b
reg signed[3:0] b2Fracionado = 'b0100;  //Parte fracionada do segundo operando de b
reg signed[2:0] respB; //Resposta da questao b
reg signed[3:0] respBfracionada; //Resposta da parte fracionada de b

reg signed[5:0] c; //Primeiro operando
reg signed[5:0] c2; //Segundo operando
reg signed[5:0] cResp; //Resposta da operacao

reg signed[7:0] d = 'o321; //Primeiro operando
reg signed[6:0] d2 = 'o123; //Segundo operando
reg signed[7:0] dResp; //Resposta da operacao

reg signed[10:0] e = 'h7e6; //Primeiro operando
reg signed[11:0] e2 = 'ha1b; //Segundo operando
reg signed[11:0] eResp; //Resposta da operacao

initial
begin : main

	respA = (a - a2);

	respB = (b - b2);
	respBfracionada = (bFracionado - b2Fracionado);

	c[1:0] = 1;
	c[3:2] = 3;
	c[5:4] = 2;
	c2[1:0] = 3;
	c2[3:2] = 1;
	c2[5:4] = 1;
	cResp = (c - c2);

	dResp = (d - d2);

	eResp = (e - e2);

	$display("a) %b", respA);
        $display("b) %b,%b", respB, respBfracionada);
	$display("c) %d%d%d", cResp[5:4], cResp[3:2], cResp[1:0]);
	$display("d) %o", dResp);
	$display("e) %h", eResp);
		

end
endmodule


5)

a)
	101010(2) - 1011(2) = 11111(2)

b)
	101,1101(2) - 2,5(8) = 11,1001(2)

c)
	312(4) - B(16) = 101011(2)

d)
	AB(16) - 1001111(2) = 1011100(2)

e)
	36(10) - 2C(16) = 111(2) 



module Questao5;

reg[7:0] a = 'b101010; //Primeiro operando
reg[7:0] a2 = 'b1011; //Segundo operando
reg[7:0] respA; //Resposta da A

reg[7:0] b = 'b101; //Parte inteira do primeiro operando
reg[7:0] bFrac = 'b11010000; //Parte fracionada do primeiro operando
reg[7:0] b2 = 'o2; //Parte inteira do segundo operando
reg[7:0] b2Frac = 'o500; //Parte fracionada do segundo operando
reg[7:0] respB; //Resposta da parte inteira
reg[7:0] respBFrac; //Resposta da parte fracionada

reg[7:0] c; //Parte inteira do primeiro operando
reg[7:0] c2 = 'hb; //Segundo operando
reg[7:0] respC; //Resposta

reg[7:0] d = 'hab; //Primeiro operando
reg[7:0] d2 = 'b1001111; //Segundo operando
reg[7:0] respD; //Resposta

reg[7:0] e = 36; //Primeiro operando
reg[7:0] e2 = 'h2c; //Segundo operando
reg[7:0] respE; //Resposta


initial
begin : main

	respA = 1 + (a + ~a2); //Subtracao usando soma de um termo com o complemtento de 2 do outro

	respB = 1 + (b + ~b2);
	respBFrac = 1 + (bFrac + ~b2Frac);

	c[1:0] = 2;
	c[3:2] = 1;
	c[5:4] = 3;
	c[7:6] = 0;
	respC = 1 + (c + ~c2);

	respD = 1 + (d + ~d2);

	respE = 1 + (e + ~e2);

	$display("a) %b", respA);
	$display("b) %b,%b", respB, respBFrac);
	$display("c) %b", respC);
	$display("d) %b", respD);
	$display("e) %b", ~respE);


end
endmodule	
